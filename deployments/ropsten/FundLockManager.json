{
  "address": "0xF22ebf87dbe51a91ea973fdbf8e4Fa1a1d06eB57",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "erc20Token",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isToken",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lockTime",
          "type": "uint256"
        }
      ],
      "name": "NewPlanCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "erc20",
          "type": "address"
        }
      ],
      "name": "NewTokenRegistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "unlocker",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "lockTime",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "swap",
          "type": "bool"
        }
      ],
      "name": "LockEth",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "erc20Token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "unlocker",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "lockTime",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isToken",
          "type": "bool"
        }
      ],
      "name": "LockToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_denominationToken",
      "outputs": [
        {
          "internalType": "contract ERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "_plans",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "unlocker",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isToken",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "lockTime",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isClaimable",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_uniswapV2Factory",
      "outputs": [
        {
          "internalType": "contract IUniswapV2Factory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_uniswapV2Router",
      "outputs": [
        {
          "internalType": "contract IUniswapV2Router02",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "allowedTokens",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "claimLockedFund",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "getPlansByOwner",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "unlocker",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isToken",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "lockTime",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isClaimable",
              "type": "bool"
            }
          ],
          "internalType": "struct FundLockManager.Plan[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "unlocker",
          "type": "address"
        }
      ],
      "name": "getPlansByUnlocker",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "unlocker",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isToken",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "lockTime",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isClaimable",
              "type": "bool"
            }
          ],
          "internalType": "struct FundLockManager.Plan[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTotalPlanCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getUnClaimedFunds",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "unlocker",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isToken",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "lockTime",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isClaimable",
              "type": "bool"
            }
          ],
          "internalType": "struct FundLockManager.Plan[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newERC20TokenAddress",
          "type": "address"
        }
      ],
      "name": "registerToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x2580892b8335fb731cdc7be261c141f3d9c1be0e366f660a0fdeac51e60d8669",
  "receipt": {
    "to": null,
    "from": "0xc09eAC15f9Ba6462e8E4612af7C431E1cfe08b87",
    "contractAddress": "0xF22ebf87dbe51a91ea973fdbf8e4Fa1a1d06eB57",
    "transactionIndex": 6,
    "gasUsed": "1986476",
    "logsBloom": "0x00000000000000000000000000000000000001000000100000800000000000000000000000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000001000000000000000000000000000000000000020000000000000000000800000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000800000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000004000000000000000000000000",
    "blockHash": "0x2a7b4aa096eff79835ac37994fae010a8b13fb6e2da22a52825d73096babab2b",
    "transactionHash": "0x2580892b8335fb731cdc7be261c141f3d9c1be0e366f660a0fdeac51e60d8669",
    "logs": [
      {
        "transactionIndex": 6,
        "blockNumber": 12181887,
        "transactionHash": "0x2580892b8335fb731cdc7be261c141f3d9c1be0e366f660a0fdeac51e60d8669",
        "address": "0xF22ebf87dbe51a91ea973fdbf8e4Fa1a1d06eB57",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000c09eac15f9ba6462e8e4612af7c431e1cfe08b87"
        ],
        "data": "0x",
        "logIndex": 7,
        "blockHash": "0x2a7b4aa096eff79835ac37994fae010a8b13fb6e2da22a52825d73096babab2b"
      }
    ],
    "blockNumber": 12181887,
    "cumulativeGasUsed": "4621520",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48"
  ],
  "numDeployments": 1,
  "solcInputHash": "fac6e742aa7c436fde18191d989d681b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"erc20Token\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isToken\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockTime\",\"type\":\"uint256\"}],\"name\":\"NewPlanCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"erc20\",\"type\":\"address\"}],\"name\":\"NewTokenRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"unlocker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lockTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"swap\",\"type\":\"bool\"}],\"name\":\"LockEth\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"erc20Token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"unlocker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lockTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isToken\",\"type\":\"bool\"}],\"name\":\"LockToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_denominationToken\",\"outputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_plans\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"unlocker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isToken\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"lockTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isClaimable\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_uniswapV2Factory\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Factory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowedTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"claimLockedFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"getPlansByOwner\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"unlocker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isToken\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"lockTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isClaimable\",\"type\":\"bool\"}],\"internalType\":\"struct FundLockManager.Plan[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"unlocker\",\"type\":\"address\"}],\"name\":\"getPlansByUnlocker\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"unlocker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isToken\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"lockTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isClaimable\",\"type\":\"bool\"}],\"internalType\":\"struct FundLockManager.Plan[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalPlanCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUnClaimedFunds\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"unlocker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isToken\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"lockTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isClaimable\",\"type\":\"bool\"}],\"internalType\":\"struct FundLockManager.Plan[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newERC20TokenAddress\",\"type\":\"address\"}],\"name\":\"registerToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"LockEth(address,uint256,bool)\":{\"details\":\"Sender will send eth to this, and if swap is true, swap it with denomination ERC20 token on uniswap, and create lock funds\",\"params\":{\"lockTime\":\"lock time\",\"swap\":\"if true, swap with denomination asset \",\"unlocker\":\"The address that will be able to unlock the funds within lock time\"}},\"LockToken(address,uint256,address,uint256,bool)\":{\"details\":\"Sender swaps any ERC20 token with Eth on uniswap, and create lock funds\",\"params\":{\"amount\":\"ERC20 token amount\",\"erc20Token\":\"Any ERC20 token for swap\",\"isToken\":\"if true, create new token plan, else create new eth plan.\",\"lockTime\":\"lock time\",\"unlocker\":\"The address that will be able to unlock the funds within lock time\"}},\"claimLockedFund(uint256)\":{\"details\":\"claim locked token within lock time  -  unlocker.\",\"params\":{\"id\":\"locked fund id\"}},\"getPlansByOwner(address)\":{\"details\":\"Get all plans per owner\",\"params\":{\"owner\":\"owner of plans*\"}},\"getPlansByUnlocker(address)\":{\"details\":\"Get certain plan per unlocker claimable.\",\"params\":{\"unlocker\":\"unlocker of plan\"}},\"getTotalPlanCount()\":{\"details\":\"get current plan's length\"},\"getUnClaimedFunds()\":{\"details\":\"Retrieve unclaimed locked funds after locktime \"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"registerToken(address)\":{\"details\":\"Register new acceptable token\",\"params\":{\"newERC20TokenAddress\":\"acceptable token address\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"withdraw(uint256)\":{\"details\":\"Withdraw money back within lockTime. Owner, \",\"params\":{\"id\":\"plan id\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FundLockManager.sol\":\"FundLockManager\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, _allowances[owner][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = _allowances[owner][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Spend `amount` form the allowance of `owner` toward `spender`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xdadd41acb749920eccf40aeaa8d291adf9751399a7343561bad13e7a8d99be0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa2f576be637946f767aa56601c26d717f48a0aff44f82e46f13807eea1009a21\",\"license\":\"MIT\"},\"contracts/FundLockManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n// use safe math to prevent underflow and overflow\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\r\\nimport \\\"./interface/IUniswapFactory.sol\\\";\\r\\nimport \\\"./interface/IUniswapRouter.sol\\\";\\r\\n\\r\\ncontract FundLockManager is Ownable, ReentrancyGuard {\\r\\n\\r\\n    // calling SafeMath will add extra functions to the uint data type\\r\\n    using SafeMath for uint; // you can make a call like myUint.add(123)\\r\\n    using Counters for Counters.Counter;\\r\\n    //Plan structure\\r\\n    struct Plan {\\r\\n        uint id;\\r\\n        address owner;\\r\\n        address unlocker;\\r\\n        uint amount;\\r\\n        bool isToken;\\r\\n        uint lockTime;\\r\\n        bool isClaimable;\\r\\n    }\\r\\n\\r\\n    ERC20 public _denominationToken;\\r\\n    mapping(address => bool) public allowedTokens;\\r\\n\\r\\n    // plans per address\\r\\n    Plan[] public _plans;\\r\\n    Counters.Counter _planCounter;\\r\\n\\r\\n    //uniswap\\r\\n    IUniswapV2Factory public _uniswapV2Factory = IUniswapV2Factory(0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f);\\r\\n    IUniswapV2Router02 public _uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\\r\\n\\r\\n    event NewPlanCreated (\\r\\n        uint id,\\r\\n        address indexed owner,\\r\\n        address indexed to,\\r\\n        bool isToken,\\r\\n        uint amount,\\r\\n        uint lockTime\\r\\n    );\\r\\n\\r\\n    event NewTokenRegistered (\\r\\n        address erc20\\r\\n    );\\r\\n\\r\\n    modifier allowedToken(address token) {\\r\\n        require(allowedTokens[token], \\\"This token is not accepted.\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    \\r\\n    constructor(address erc20Token) {\\r\\n        _denominationToken = ERC20(erc20Token);\\r\\n        allowedTokens[erc20Token] = true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n        @dev Register new acceptable token\\r\\n        @param newERC20TokenAddress acceptable token address\\r\\n     */\\r\\n    function registerToken(address newERC20TokenAddress) external onlyOwner {\\r\\n        allowedTokens[newERC20TokenAddress] = true;\\r\\n        emit NewTokenRegistered(newERC20TokenAddress);\\r\\n    }\\r\\n\\r\\n    //for receiving eth\\r\\n    receive() external payable{}\\r\\n\\r\\n    /**\\r\\n        @dev get current plan's length\\r\\n     */\\r\\n    function getTotalPlanCount() external view returns(uint256) {\\r\\n        return _planCounter.current();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n        @dev Sender will send eth to this, and if swap is true, swap it with denomination ERC20 token on uniswap, and create lock funds\\r\\n        @param unlocker The address that will be able to unlock the funds within lock time\\r\\n        @param lockTime lock time\\r\\n        @param swap if true, swap with denomination asset \\r\\n    */\\r\\n    function LockEth(address unlocker, uint lockTime, bool swap) external payable {\\r\\n        require(msg.value > 0, \\\"Eth amount should be great zero\\\");\\r\\n        require(unlocker != address(0), \\\"unlocker cannot be zero\\\");\\r\\n        require(lockTime > 0, \\\"LockTime is too short\\\");\\r\\n\\r\\n        //do swap with token\\r\\n        if (swap) {\\r\\n            uint amount = swapEthForToken();\\r\\n            //create lock funds\\r\\n            createNewERC20Plan(amount, unlocker, lockTime);\\r\\n        } else {\\r\\n            //create lock funds\\r\\n            createNewEthPlan(msg.value, unlocker, lockTime);\\r\\n        }\\r\\n    }\\r\\n   \\r\\n    /**\\r\\n        @dev Sender swaps any ERC20 token with Eth on uniswap, and create lock funds\\r\\n        @param erc20Token Any ERC20 token for swap\\r\\n        @param unlocker The address that will be able to unlock the funds within lock time\\r\\n        @param amount ERC20 token amount\\r\\n        @param lockTime lock time\\r\\n        @param isToken if true, create new token plan, else create new eth plan.\\r\\n    */\\r\\n    function LockToken(address erc20Token, uint amount, address unlocker, uint lockTime, bool isToken) external allowedToken(erc20Token) {\\r\\n        require(amount > 0, \\\"Eth amount should be great zero\\\");\\r\\n        require(unlocker != address(0), \\\"unlocker cannot be zero\\\");\\r\\n        require(lockTime > 0, \\\"LockTime is too short\\\");\\r\\n        require(ERC20(erc20Token).allowance(msg.sender, address(this)) >= amount, \\\"Allowance is not enough.\\\");\\r\\n        require(ERC20(erc20Token).transferFrom(msg.sender, address(this), amount), \\\"Transfer Failed.\\\");\\r\\n\\r\\n        uint _amount = amount;\\r\\n        bool swap = (erc20Token != address(_denominationToken)); \\r\\n        if (swap) {\\r\\n            require(ERC20(erc20Token).approve(address(_uniswapV2Router), amount), \\\"Transfer Not Allowed\\\");\\r\\n        }\\r\\n        if (isToken) {\\r\\n            if (swap) {\\r\\n                _amount = swapTokenForToken(erc20Token, amount);\\r\\n            }\\r\\n            createNewERC20Plan(_amount, unlocker, lockTime);\\r\\n        } else {\\r\\n            _amount = swapTokenForEth(erc20Token, amount);\\r\\n            createNewEthPlan(_amount, unlocker, lockTime);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    @dev Swap erc20 token with Eth\\r\\n    @param tokenAmount token amount for swap.\\r\\n    @param erc20Token Allowed ERC20 token for swap\\r\\n    */\\r\\n\\r\\n    function swapTokenForEth(address erc20Token, uint256 tokenAmount) private returns (uint) {\\r\\n        // generate the uniswap pair path of token -> weth\\r\\n        address[] memory path = new address[](2);\\r\\n        path[0] = erc20Token;\\r\\n        path[1] = _uniswapV2Router.WETH();\\r\\n\\r\\n        uint originBalance = address(this).balance;\\r\\n        // make the swap\\r\\n        _uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n            tokenAmount,\\r\\n            0, // accept any amount of ETH\\r\\n            path,\\r\\n            address(this),\\r\\n            block.timestamp + 300\\r\\n        );\\r\\n        uint currentBalance = address(this).balance;\\r\\n\\r\\n        return currentBalance.sub(originBalance);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    @dev Swap erc20 token with Eth\\r\\n    */\\r\\n\\r\\n    function swapEthForToken() private returns (uint) {\\r\\n        // generate the uniswap pair path of token -> weth\\r\\n        address[] memory path = new address[](2);\\r\\n        path[0] = _uniswapV2Router.WETH();\\r\\n        path[1] = address(_denominationToken);\\r\\n\\r\\n        uint originBalance = _denominationToken.balanceOf(address(this));\\r\\n        // make the swap\\r\\n        _uniswapV2Router.swapExactETHForTokensSupportingFeeOnTransferTokens{value: msg.value}(\\r\\n            0,\\r\\n            path,\\r\\n            address(this),\\r\\n            block.timestamp + 300\\r\\n        );\\r\\n        uint currentBalance = _denominationToken.balanceOf(address(this));\\r\\n        return currentBalance.sub(originBalance);\\r\\n    }\\r\\n\\r\\n     /**\\r\\n    @dev Swap erc20 token with denomination ERC20 token\\r\\n    @param tokenAmount token amount for swap.\\r\\n    @param erc20Token Allowed ERC20 token for swap\\r\\n    */\\r\\n\\r\\n    function swapTokenForToken(address erc20Token, uint256 tokenAmount) private returns(uint) {\\r\\n        // generate the uniswap pair path of token -> weth\\r\\n        address[] memory path = new address[](2);\\r\\n        path[0] = erc20Token;\\r\\n        path[1] = address(_denominationToken);\\r\\n\\r\\n        uint originBalance = _denominationToken.balanceOf(address(this));\\r\\n\\r\\n        // make the swap\\r\\n        _uniswapV2Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\\r\\n            tokenAmount,\\r\\n            0, // accept any amount of ETH\\r\\n            path,\\r\\n            address(this),\\r\\n            block.timestamp\\r\\n        );\\r\\n        uint currentBalance = _denominationToken.balanceOf(address(this));\\r\\n\\r\\n        return currentBalance.sub(originBalance);\\r\\n    }\\r\\n\\r\\n    \\r\\n    /** \\r\\n        @dev Create New Eth plan.\\r\\n        @param amount eth amount to be locked\\r\\n        @param unlocker: address that has right to unlock fund in locktime.\\r\\n        @param lockTime: lock time\\r\\n    **/ \\r\\n\\r\\n    function createNewEthPlan(uint amount, address unlocker, uint256 lockTime) internal {\\r\\n\\r\\n        Plan memory _newPlan = Plan({\\r\\n            id: _planCounter.current(),\\r\\n            owner: msg.sender,\\r\\n            unlocker: unlocker,\\r\\n            amount: amount,\\r\\n            isToken: false,\\r\\n            lockTime: block.timestamp + lockTime,\\r\\n            isClaimable: true\\r\\n        });\\r\\n\\r\\n        _plans.push(_newPlan);\\r\\n        emit NewPlanCreated(_planCounter.current(), msg.sender, unlocker, false, amount, lockTime);\\r\\n\\r\\n        _planCounter.increment();\\r\\n    }\\r\\n\\r\\n    /** \\r\\n        @dev Create New ERC20 plan.\\r\\n        @param amount: Token amount\\r\\n        @param unlocker: address that has right to unlock fund in locktime.\\r\\n        @param lockTime: lock time\\r\\n    **/ \\r\\n\\r\\n    function createNewERC20Plan( uint256 amount, address unlocker, uint256 lockTime ) internal {\\r\\n        Plan memory _newPlan = Plan({\\r\\n            id: _planCounter.current(),\\r\\n            owner: msg.sender,\\r\\n            unlocker: unlocker,\\r\\n            amount: amount,\\r\\n            isToken: true,\\r\\n            lockTime: block.timestamp + lockTime,\\r\\n            isClaimable: true\\r\\n        });\\r\\n\\r\\n        _plans.push(_newPlan);\\r\\n\\r\\n        emit NewPlanCreated(_planCounter.current(), msg.sender, unlocker, true, amount, lockTime);\\r\\n        _planCounter.increment();\\r\\n    }\\r\\n\\r\\n    /** \\r\\n        @dev Get all plans per owner\\r\\n        @param owner owner of plans\\r\\n    **/\\r\\n\\r\\n    function getPlansByOwner(address owner) public view returns(Plan[] memory) {\\r\\n        Plan[] memory plans = new Plan[](_plans.length);\\r\\n        uint counter = 0;\\r\\n        for (uint i = 0 ; i < _plans.length ; i ++ ) {\\r\\n            Plan memory plan = _plans[i];\\r\\n            if (plan.owner == owner) {\\r\\n                plans[counter] = plan;\\r\\n                counter ++;\\r\\n            }\\r\\n        }\\r\\n        return plans;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n        @dev Get certain plan per unlocker claimable.\\r\\n        @param unlocker unlocker of plan\\r\\n     */\\r\\n\\r\\n    function getPlansByUnlocker(address unlocker) external view returns(Plan[] memory) {\\r\\n        Plan[] memory plans = new Plan[](_plans.length);\\r\\n        uint counter = 0;\\r\\n        for (uint i = 0 ; i < _plans.length ; i ++ ) {\\r\\n            Plan memory plan = _plans[i];\\r\\n            if (plan.unlocker == unlocker && block.timestamp < plan.lockTime && plan.isClaimable) {\\r\\n                plans[counter] = plan;\\r\\n                counter ++;\\r\\n            }\\r\\n        }\\r\\n        return plans;\\r\\n    }\\r\\n\\r\\n\\r\\n    /**\\r\\n        @dev claim locked token within lock time  -  unlocker.\\r\\n        @param id locked fund id\\r\\n     */\\r\\n\\r\\n     function claimLockedFund(uint id) external nonReentrant {\\r\\n        require(id <= _planCounter.current(), \\\"Fund not exist.\\\");\\r\\n        Plan storage plan = _plans[id];\\r\\n\\r\\n        require(plan.unlocker == msg.sender, \\\"You are not unlocker.\\\");\\r\\n        require(plan.lockTime > block.timestamp, \\\"Fund expired.\\\");\\r\\n        require(plan.isClaimable, \\\"Fund already claimed.\\\");\\r\\n\\r\\n        plan.isClaimable = false;\\r\\n\\r\\n        if (plan.isToken) {\\r\\n            require(_denominationToken.transfer(msg.sender, plan.amount), \\\"Transfer Failed.\\\");\\r\\n        } else {\\r\\n             (bool sent, bytes memory data) = msg.sender.call{value: plan.amount}(\\\"\\\");\\r\\n            require(sent, \\\"Failed to send Ether\\\");\\r\\n        }\\r\\n\\r\\n     }\\r\\n\\r\\n     /**\\r\\n        @dev Withdraw money back within lockTime. Owner, \\r\\n        @param id plan id\\r\\n      */\\r\\n\\r\\n      function withdraw(uint id) external nonReentrant {\\r\\n        require(id <= _planCounter.current(), \\\"Fund not exist.\\\");\\r\\n        Plan storage plan = _plans[id];\\r\\n\\r\\n        require(plan.owner == msg.sender, \\\"You are not owner.\\\");\\r\\n        require(plan.lockTime < block.timestamp, \\\"Fund not expired.\\\");\\r\\n        require(plan.isClaimable, \\\"Fund already claimed.\\\");\\r\\n\\r\\n        plan.isClaimable = false;\\r\\n\\r\\n        if (plan.isToken) {\\r\\n            require(_denominationToken.transfer(msg.sender, plan.amount), \\\"Transfer Failed.\\\");\\r\\n        } else {\\r\\n             (bool sent, bytes memory data) = msg.sender.call{value: plan.amount}(\\\"\\\");\\r\\n            require(sent, \\\"Failed to send Ether\\\");\\r\\n        }\\r\\n      }\\r\\n\\r\\n    /**\\r\\n        @dev Retrieve unclaimed locked funds after locktime \\r\\n     */\\r\\n\\r\\n    function getUnClaimedFunds() external view returns(Plan[] memory) {\\r\\n        Plan[] memory myPlans = getPlansByOwner(msg.sender);\\r\\n        Plan[] memory unClaimedFunds = new Plan[](myPlans.length);\\r\\n        \\r\\n        uint counter = 0;\\r\\n        for (uint i = 0; i < myPlans.length ; i ++) {\\r\\n            Plan memory plan = myPlans[i];\\r\\n            if ( block.timestamp > plan.lockTime && plan.isClaimable) {\\r\\n                unClaimedFunds[counter] = plan;\\r\\n                counter ++;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return unClaimedFunds;\\r\\n    }\\r\\n\\r\\n}\",\"keccak256\":\"0x0b2057c63a0c900b78a4b470576644dd94a5c2469b01acf584694dab22c9fc3b\",\"license\":\"MIT\"},\"contracts/interface/IUniswapFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n\\r\\ninterface IUniswapV2Factory {\\r\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\r\\n\\r\\n    function feeTo() external view returns (address);\\r\\n    function feeToSetter() external view returns (address);\\r\\n\\r\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\r\\n    function allPairs(uint) external view returns (address pair);\\r\\n    function allPairsLength() external view returns (uint);\\r\\n\\r\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\r\\n\\r\\n    function setFeeTo(address) external;\\r\\n    function setFeeToSetter(address) external;\\r\\n}\",\"keccak256\":\"0x1380b8ec5324543f281d0eda97d09b60c5308a77e5b8ba7fbb6fcee77bf9f261\",\"license\":\"MIT\"},\"contracts/interface/IUniswapRouter.sol\":{\"content\":\"\\r\\n// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\nimport \\\"./IUniswapRouter01.sol\\\";\\r\\n\\r\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\r\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountETH);\\r\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n    ) external returns (uint amountETH);\\r\\n\\r\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external;\\r\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external payable;\\r\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external;\\r\\n}\\r\\n\\r\\n\",\"keccak256\":\"0xca871244f01824e549d1611f90c5e6b2eecec9fdc599e2d9732f3c62cc19dc0b\",\"license\":\"MIT\"},\"contracts/interface/IUniswapRouter01.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IUniswapV2Router01 {\\r\\n    function factory() external pure returns (address);\\r\\n    function WETH() external pure returns (address);\\r\\n\\r\\n    function addLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint amountADesired,\\r\\n        uint amountBDesired,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\r\\n    function addLiquidityETH(\\r\\n        address token,\\r\\n        uint amountTokenDesired,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\r\\n    function removeLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint liquidity,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountA, uint amountB);\\r\\n    function removeLiquidityETH(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountToken, uint amountETH);\\r\\n    function removeLiquidityWithPermit(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint liquidity,\\r\\n        uint amountAMin,\\r\\n        uint amountBMin,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n    ) external returns (uint amountA, uint amountB);\\r\\n    function removeLiquidityETHWithPermit(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline,\\r\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\r\\n    ) external returns (uint amountToken, uint amountETH);\\r\\n    function swapExactTokensForTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint[] memory amounts);\\r\\n    function swapTokensForExactTokens(\\r\\n        uint amountOut,\\r\\n        uint amountInMax,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint[] memory amounts);\\r\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        payable\\r\\n        returns (uint[] memory amounts);\\r\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        returns (uint[] memory amounts);\\r\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        returns (uint[] memory amounts);\\r\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\r\\n        external\\r\\n        payable\\r\\n        returns (uint[] memory amounts);\\r\\n\\r\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\r\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\r\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\r\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\r\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\r\\n}\\r\\n\",\"keccak256\":\"0x35b5109b6ad52fb8b5b581950002986ab1600a42f7015f23d8260de370c3cd26\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080604052600680546001600160a01b0319908116735c69bee701ef814a2b6a3edd4b1652cb9cc5aa6f1790915560078054909116737a250d5630b4cf539739df2c5dacb4c659f2488d1790553480156200005957600080fd5b50604051620021cd380380620021cd8339810160408190526200007c916200011b565b6200008733620000cb565b6001808055600280546001600160a01b039093166001600160a01b031990931683179055600091825260036020526040909120805460ff191690911790556200014d565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000602082840312156200012e57600080fd5b81516001600160a01b03811681146200014657600080fd5b9392505050565b612070806200015d6000396000f3fe6080604052600436106101025760003560e01c80635ac63c59116100955780638da5cb5b116100645780638da5cb5b146102e0578063d7dd2c99146102fe578063e036a05e14610321578063e744092e14610341578063f2fde38b1461038157600080fd5b80635ac63c59146102315780636eb6c2de14610246578063715018a6146102ab5780637d152d9b146102c057600080fd5b80632e1a7d4d116100d15780632e1a7d4d146101995780634bd70222146101b9578063571f9b3d146101f1578063583e05681461021157600080fd5b8063076b18b51461010e57806309824a801461012357806313103007146101435780632811961f1461016357600080fd5b3661010957005b600080fd5b61012161011c366004611d08565b6103a1565b005b34801561012f57600080fd5b5061012161013e366004611d4a565b6104c1565b34801561014f57600080fd5b5061012161015e366004611d67565b610545565b34801561016f57600080fd5b5061018361017e366004611d4a565b610929565b6040516101909190611dc6565b60405180910390f35b3480156101a557600080fd5b506101216101b4366004611e58565b610a92565b3480156101c557600080fd5b506002546101d9906001600160a01b031681565b6040516001600160a01b039091168152602001610190565b3480156101fd57600080fd5b5061018361020c366004611d4a565b610db4565b34801561021d57600080fd5b506007546101d9906001600160a01b031681565b34801561023d57600080fd5b50610183610ef7565b34801561025257600080fd5b50610266610261366004611e58565b610fe2565b604080519788526001600160a01b039687166020890152949095169386019390935260608501919091521515608084015260a0830152151560c082015260e001610190565b3480156102b757600080fd5b50610121611044565b3480156102cc57600080fd5b506101216102db366004611e58565b61107a565b3480156102ec57600080fd5b506000546001600160a01b03166101d9565b34801561030a57600080fd5b506103136111d6565b604051908152602001610190565b34801561032d57600080fd5b506006546101d9906001600160a01b031681565b34801561034d57600080fd5b5061037161035c366004611d4a565b60036020526000908152604090205460ff1681565b6040519015158152602001610190565b34801561038d57600080fd5b5061012161039c366004611d4a565b6111e6565b600034116103f65760405162461bcd60e51b815260206004820152601f60248201527f45746820616d6f756e742073686f756c64206265206772656174207a65726f0060448201526064015b60405180910390fd5b6001600160a01b0383166104465760405162461bcd60e51b8152602060048201526017602482015276756e6c6f636b65722063616e6e6f74206265207a65726f60481b60448201526064016103ed565b6000821161048e5760405162461bcd60e51b8152602060048201526015602482015274131bd8dad51a5b59481a5cc81d1bdbc81cda1bdc9d605a1b60448201526064016103ed565b80156104b157600061049e611281565b90506104ab8185856114ce565b50505050565b6104bc3484846116f9565b505050565b6000546001600160a01b031633146104eb5760405162461bcd60e51b81526004016103ed90611e71565b6001600160a01b038116600081815260036020908152604091829020805460ff1916600117905590519182527f93c7a70d5c04c7be4134b379e978b0db663df1be8f425a67e9cc28e0450ffbe0910160405180910390a150565b6001600160a01b038516600090815260036020526040902054859060ff166105af5760405162461bcd60e51b815260206004820152601b60248201527f5468697320746f6b656e206973206e6f742061636365707465642e000000000060448201526064016103ed565b600085116105ff5760405162461bcd60e51b815260206004820152601f60248201527f45746820616d6f756e742073686f756c64206265206772656174207a65726f0060448201526064016103ed565b6001600160a01b03841661064f5760405162461bcd60e51b8152602060048201526017602482015276756e6c6f636b65722063616e6e6f74206265207a65726f60481b60448201526064016103ed565b600083116106975760405162461bcd60e51b8152602060048201526015602482015274131bd8dad51a5b59481a5cc81d1bdbc81cda1bdc9d605a1b60448201526064016103ed565b604051636eb1769f60e11b815233600482015230602482015285906001600160a01b0388169063dd62ed3e90604401602060405180830381865afa1580156106e3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107079190611ea6565b10156107555760405162461bcd60e51b815260206004820152601860248201527f416c6c6f77616e6365206973206e6f7420656e6f7567682e000000000000000060448201526064016103ed565b6040516323b872dd60e01b8152336004820152306024820152604481018690526001600160a01b038716906323b872dd906064016020604051808303816000875af11580156107a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107cc9190611ebf565b61080b5760405162461bcd60e51b815260206004820152601060248201526f2a3930b739b332b9102330b4b632b21760811b60448201526064016103ed565b60025485906001600160a01b038881169116148015906108df5760075460405163095ea7b360e01b81526001600160a01b039182166004820152602481018990529089169063095ea7b3906044016020604051808303816000875af1158015610878573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061089c9190611ebf565b6108df5760405162461bcd60e51b8152602060048201526014602482015273151c985b9cd9995c88139bdd08105b1b1bddd95960621b60448201526064016103ed565b83156109085780156108f8576108f58888611912565b91505b6109038287876114ce565b61091f565b6109128888611aeb565b915061091f8287876116f9565b5050505050505050565b60045460609060009067ffffffffffffffff81111561094a5761094a611edc565b60405190808252806020026020018201604052801561098357816020015b610970611ca9565b8152602001906001900390816109685790505b5090506000805b600454811015610a89576000600482815481106109a9576109a9611ef2565b60009182526020918290206040805160e08101825260079093029091018054835260018101546001600160a01b03908116948401949094526002810154841691830182905260038101546060840152600481015460ff90811615156080850152600582015460a085015260069091015416151560c0830152909250908716148015610a3757508060a0015142105b8015610a4457508060c001515b15610a765780848481518110610a5c57610a5c611ef2565b60200260200101819052508280610a7290611f1e565b9350505b5080610a8181611f1e565b91505061098a565b50909392505050565b60026001541415610ae55760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016103ed565b6002600155600554811115610b2e5760405162461bcd60e51b815260206004820152600f60248201526e233ab732103737ba1032bc34b9ba1760891b60448201526064016103ed565b600060048281548110610b4357610b43611ef2565b600091825260209091206001600790920201908101549091506001600160a01b03163314610ba85760405162461bcd60e51b81526020600482015260126024820152712cb7ba9030b932903737ba1037bbb732b91760711b60448201526064016103ed565b42816005015410610bef5760405162461bcd60e51b8152602060048201526011602482015270233ab732103737ba1032bc3834b932b21760791b60448201526064016103ed565b600681015460ff16610c3b5760405162461bcd60e51b8152602060048201526015602482015274233ab7321030b63932b0b23c9031b630b4b6b2b21760591b60448201526064016103ed565b60068101805460ff19169055600481015460ff1615610d1357600254600382015460405163a9059cbb60e01b815233600482015260248101919091526001600160a01b039091169063a9059cbb906044016020604051808303816000875af1158015610cab573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ccf9190611ebf565b610d0e5760405162461bcd60e51b815260206004820152601060248201526f2a3930b739b332b9102330b4b632b21760811b60448201526064016103ed565b610dac565b600381015460405160009182913391908381818185875af1925050503d8060008114610d5b576040519150601f19603f3d011682016040523d82523d6000602084013e610d60565b606091505b509150915081610da95760405162461bcd60e51b81526020600482015260146024820152732330b4b632b2103a379039b2b7321022ba3432b960611b60448201526064016103ed565b50505b505060018055565b60045460609060009067ffffffffffffffff811115610dd557610dd5611edc565b604051908082528060200260200182016040528015610e0e57816020015b610dfb611ca9565b815260200190600190039081610df35790505b5090506000805b600454811015610a8957600060048281548110610e3457610e34611ef2565b60009182526020918290206040805160e08101825260079093029091018054835260018101546001600160a01b03908116948401859052600282015481169284019290925260038101546060840152600481015460ff90811615156080850152600582015460a085015260069091015416151560c083015290925087161415610ee45780848481518110610eca57610eca611ef2565b60200260200101819052508280610ee090611f1e565b9350505b5080610eef81611f1e565b915050610e15565b60606000610f0433610db4565b90506000815167ffffffffffffffff811115610f2257610f22611edc565b604051908082528060200260200182016040528015610f5b57816020015b610f48611ca9565b815260200190600190039081610f405790505b5090506000805b8351811015610a89576000848281518110610f7f57610f7f611ef2565b602002602001015190508060a0015142118015610f9d57508060c001515b15610fcf5780848481518110610fb557610fb5611ef2565b60200260200101819052508280610fcb90611f1e565b9350505b5080610fda81611f1e565b915050610f62565b60048181548110610ff257600080fd5b600091825260209091206007909102018054600182015460028301546003840154600485015460058601546006909601549496506001600160a01b03938416959290931693909260ff90811692911687565b6000546001600160a01b0316331461106e5760405162461bcd60e51b81526004016103ed90611e71565b6110786000611c46565b565b600260015414156110cd5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016103ed565b60026001556005548111156111165760405162461bcd60e51b815260206004820152600f60248201526e233ab732103737ba1032bc34b9ba1760891b60448201526064016103ed565b60006004828154811061112b5761112b611ef2565b600091825260209091206002600790920201908101549091506001600160a01b031633146111935760405162461bcd60e51b81526020600482015260156024820152742cb7ba9030b932903737ba103ab73637b1b5b2b91760591b60448201526064016103ed565b42816005015411610bef5760405162461bcd60e51b815260206004820152600d60248201526c233ab7321032bc3834b932b21760991b60448201526064016103ed565b60006111e160055490565b905090565b6000546001600160a01b031633146112105760405162461bcd60e51b81526004016103ed90611e71565b6001600160a01b0381166112755760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016103ed565b61127e81611c46565b50565b604080516002808252606082018352600092839291906020830190803683375050600754604080516315ab88c960e31b815290519394506001600160a01b039091169263ad5c4648925060048083019260209291908290030181865afa1580156112ef573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113139190611f39565b8160008151811061132657611326611ef2565b6001600160a01b03928316602091820292909201015260025482519116908290600190811061135757611357611ef2565b6001600160a01b0392831660209182029290920101526002546040516370a0823160e01b815230600482015260009291909116906370a0823190602401602060405180830381865afa1580156113b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113d59190611ea6565b6007549091506001600160a01b031663b6f9de9534600085306113fa4261012c611f56565b6040518663ffffffff1660e01b81526004016114199493929190611fb2565b6000604051808303818588803b15801561143257600080fd5b505af1158015611446573d6000803e3d6000fd5b50506002546040516370a0823160e01b8152306004820152600094506001600160a01b0390911692506370a082319150602401602060405180830381865afa158015611496573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114ba9190611ea6565b90506114c68183611c96565b935050505090565b60006040518060e001604052806114e460055490565b81523360208201526001600160a01b0385166040820152606081018690526001608082015260a0016115168442611f56565b815260016020918201819052600480549182018155600052825160079091027f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b810191909155908201517f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19c820180546001600160a01b039283166001600160a01b03199182161790915560408401517f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19d840180549184169190921617905560608301517f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19e83015560808301517f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19f8301805491151560ff1992831617905560a08401517f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd1a084015560c08401517f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd1a1909301805493151593909116929092179091559091508316337fbd6a81ea5131b9b20bf4f7058beb7d920e9fc7383a749741f938bdb75133a9a76116c560055490565b60408051918252600160208301528101889052606081018690526080015b60405180910390a36104ab600580546001019055565b60006040518060e0016040528061170f60055490565b81523360208201526001600160a01b0385166040820152606081018690526000608082015260a0016117418442611f56565b815260016020918201819052600480549182018155600052825160079091027f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b810191909155908201517f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19c820180546001600160a01b039283166001600160a01b03199182161790915560408401517f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19d840180549184169190921617905560608301517f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19e83015560808301517f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19f8301805491151560ff1992831617905560a08401517f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd1a084015560c08401517f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd1a1909301805493151593909116929092179091559091508316337fbd6a81ea5131b9b20bf4f7058beb7d920e9fc7383a749741f938bdb75133a9a76118f060055490565b60408051918252600060208301528101889052606081018690526080016116e3565b60408051600280825260608201835260009283929190602083019080368337019050509050838160008151811061194b5761194b611ef2565b6001600160a01b03928316602091820292909201015260025482519116908290600190811061197c5761197c611ef2565b6001600160a01b0392831660209182029290920101526002546040516370a0823160e01b815230600482015260009291909116906370a0823190602401602060405180830381865afa1580156119d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119fa9190611ea6565b600754604051635c11d79560e01b81529192506001600160a01b031690635c11d79590611a34908790600090879030904290600401611fe7565b600060405180830381600087803b158015611a4e57600080fd5b505af1158015611a62573d6000803e3d6000fd5b50506002546040516370a0823160e01b8152306004820152600093506001600160a01b0390911691506370a0823190602401602060405180830381865afa158015611ab1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ad59190611ea6565b9050611ae18183611c96565b9695505050505050565b604080516002808252606082018352600092839291906020830190803683370190505090508381600081518110611b2457611b24611ef2565b6001600160a01b03928316602091820292909201810191909152600754604080516315ab88c960e31b81529051919093169263ad5c46489260048083019391928290030181865afa158015611b7d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ba19190611f39565b81600181518110611bb457611bb4611ef2565b6001600160a01b03928316602091820292909201015260075447911663791ac9478560008530611be64261012c611f56565b6040518663ffffffff1660e01b8152600401611c06959493929190611fe7565b600060405180830381600087803b158015611c2057600080fd5b505af1158015611c34573d6000803e3d6000fd5b50479250611ae1915082905083611c96565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000611ca28284612023565b9392505050565b6040805160e081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c081019190915290565b6001600160a01b038116811461127e57600080fd5b801515811461127e57600080fd5b600080600060608486031215611d1d57600080fd5b8335611d2881611ce5565b9250602084013591506040840135611d3f81611cfa565b809150509250925092565b600060208284031215611d5c57600080fd5b8135611ca281611ce5565b600080600080600060a08688031215611d7f57600080fd5b8535611d8a81611ce5565b9450602086013593506040860135611da181611ce5565b9250606086013591506080860135611db881611cfa565b809150509295509295909350565b602080825282518282018190526000919060409081850190868401855b82811015611e4b57815180518552868101516001600160a01b03908116888701528682015116868601526060808201519086015260808082015115159086015260a0808201519086015260c09081015115159085015260e09093019290850190600101611de3565b5091979650505050505050565b600060208284031215611e6a57600080fd5b5035919050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b600060208284031215611eb857600080fd5b5051919050565b600060208284031215611ed157600080fd5b8151611ca281611cfa565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600019821415611f3257611f32611f08565b5060010190565b600060208284031215611f4b57600080fd5b8151611ca281611ce5565b60008219821115611f6957611f69611f08565b500190565b600081518084526020808501945080840160005b83811015611fa75781516001600160a01b031687529582019590820190600101611f82565b509495945050505050565b848152608060208201526000611fcb6080830186611f6e565b6001600160a01b03949094166040830152506060015292915050565b85815284602082015260a06040820152600061200660a0830186611f6e565b6001600160a01b0394909416606083015250608001529392505050565b60008282101561203557612035611f08565b50039056fea264697066735822122060315ed84d4f5f97939b40e787ebd5d3f9c33ae509ecb55b7e5a473c87f17c1764736f6c634300080a0033",
  "deployedBytecode": "0x6080604052600436106101025760003560e01c80635ac63c59116100955780638da5cb5b116100645780638da5cb5b146102e0578063d7dd2c99146102fe578063e036a05e14610321578063e744092e14610341578063f2fde38b1461038157600080fd5b80635ac63c59146102315780636eb6c2de14610246578063715018a6146102ab5780637d152d9b146102c057600080fd5b80632e1a7d4d116100d15780632e1a7d4d146101995780634bd70222146101b9578063571f9b3d146101f1578063583e05681461021157600080fd5b8063076b18b51461010e57806309824a801461012357806313103007146101435780632811961f1461016357600080fd5b3661010957005b600080fd5b61012161011c366004611d08565b6103a1565b005b34801561012f57600080fd5b5061012161013e366004611d4a565b6104c1565b34801561014f57600080fd5b5061012161015e366004611d67565b610545565b34801561016f57600080fd5b5061018361017e366004611d4a565b610929565b6040516101909190611dc6565b60405180910390f35b3480156101a557600080fd5b506101216101b4366004611e58565b610a92565b3480156101c557600080fd5b506002546101d9906001600160a01b031681565b6040516001600160a01b039091168152602001610190565b3480156101fd57600080fd5b5061018361020c366004611d4a565b610db4565b34801561021d57600080fd5b506007546101d9906001600160a01b031681565b34801561023d57600080fd5b50610183610ef7565b34801561025257600080fd5b50610266610261366004611e58565b610fe2565b604080519788526001600160a01b039687166020890152949095169386019390935260608501919091521515608084015260a0830152151560c082015260e001610190565b3480156102b757600080fd5b50610121611044565b3480156102cc57600080fd5b506101216102db366004611e58565b61107a565b3480156102ec57600080fd5b506000546001600160a01b03166101d9565b34801561030a57600080fd5b506103136111d6565b604051908152602001610190565b34801561032d57600080fd5b506006546101d9906001600160a01b031681565b34801561034d57600080fd5b5061037161035c366004611d4a565b60036020526000908152604090205460ff1681565b6040519015158152602001610190565b34801561038d57600080fd5b5061012161039c366004611d4a565b6111e6565b600034116103f65760405162461bcd60e51b815260206004820152601f60248201527f45746820616d6f756e742073686f756c64206265206772656174207a65726f0060448201526064015b60405180910390fd5b6001600160a01b0383166104465760405162461bcd60e51b8152602060048201526017602482015276756e6c6f636b65722063616e6e6f74206265207a65726f60481b60448201526064016103ed565b6000821161048e5760405162461bcd60e51b8152602060048201526015602482015274131bd8dad51a5b59481a5cc81d1bdbc81cda1bdc9d605a1b60448201526064016103ed565b80156104b157600061049e611281565b90506104ab8185856114ce565b50505050565b6104bc3484846116f9565b505050565b6000546001600160a01b031633146104eb5760405162461bcd60e51b81526004016103ed90611e71565b6001600160a01b038116600081815260036020908152604091829020805460ff1916600117905590519182527f93c7a70d5c04c7be4134b379e978b0db663df1be8f425a67e9cc28e0450ffbe0910160405180910390a150565b6001600160a01b038516600090815260036020526040902054859060ff166105af5760405162461bcd60e51b815260206004820152601b60248201527f5468697320746f6b656e206973206e6f742061636365707465642e000000000060448201526064016103ed565b600085116105ff5760405162461bcd60e51b815260206004820152601f60248201527f45746820616d6f756e742073686f756c64206265206772656174207a65726f0060448201526064016103ed565b6001600160a01b03841661064f5760405162461bcd60e51b8152602060048201526017602482015276756e6c6f636b65722063616e6e6f74206265207a65726f60481b60448201526064016103ed565b600083116106975760405162461bcd60e51b8152602060048201526015602482015274131bd8dad51a5b59481a5cc81d1bdbc81cda1bdc9d605a1b60448201526064016103ed565b604051636eb1769f60e11b815233600482015230602482015285906001600160a01b0388169063dd62ed3e90604401602060405180830381865afa1580156106e3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107079190611ea6565b10156107555760405162461bcd60e51b815260206004820152601860248201527f416c6c6f77616e6365206973206e6f7420656e6f7567682e000000000000000060448201526064016103ed565b6040516323b872dd60e01b8152336004820152306024820152604481018690526001600160a01b038716906323b872dd906064016020604051808303816000875af11580156107a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107cc9190611ebf565b61080b5760405162461bcd60e51b815260206004820152601060248201526f2a3930b739b332b9102330b4b632b21760811b60448201526064016103ed565b60025485906001600160a01b038881169116148015906108df5760075460405163095ea7b360e01b81526001600160a01b039182166004820152602481018990529089169063095ea7b3906044016020604051808303816000875af1158015610878573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061089c9190611ebf565b6108df5760405162461bcd60e51b8152602060048201526014602482015273151c985b9cd9995c88139bdd08105b1b1bddd95960621b60448201526064016103ed565b83156109085780156108f8576108f58888611912565b91505b6109038287876114ce565b61091f565b6109128888611aeb565b915061091f8287876116f9565b5050505050505050565b60045460609060009067ffffffffffffffff81111561094a5761094a611edc565b60405190808252806020026020018201604052801561098357816020015b610970611ca9565b8152602001906001900390816109685790505b5090506000805b600454811015610a89576000600482815481106109a9576109a9611ef2565b60009182526020918290206040805160e08101825260079093029091018054835260018101546001600160a01b03908116948401949094526002810154841691830182905260038101546060840152600481015460ff90811615156080850152600582015460a085015260069091015416151560c0830152909250908716148015610a3757508060a0015142105b8015610a4457508060c001515b15610a765780848481518110610a5c57610a5c611ef2565b60200260200101819052508280610a7290611f1e565b9350505b5080610a8181611f1e565b91505061098a565b50909392505050565b60026001541415610ae55760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016103ed565b6002600155600554811115610b2e5760405162461bcd60e51b815260206004820152600f60248201526e233ab732103737ba1032bc34b9ba1760891b60448201526064016103ed565b600060048281548110610b4357610b43611ef2565b600091825260209091206001600790920201908101549091506001600160a01b03163314610ba85760405162461bcd60e51b81526020600482015260126024820152712cb7ba9030b932903737ba1037bbb732b91760711b60448201526064016103ed565b42816005015410610bef5760405162461bcd60e51b8152602060048201526011602482015270233ab732103737ba1032bc3834b932b21760791b60448201526064016103ed565b600681015460ff16610c3b5760405162461bcd60e51b8152602060048201526015602482015274233ab7321030b63932b0b23c9031b630b4b6b2b21760591b60448201526064016103ed565b60068101805460ff19169055600481015460ff1615610d1357600254600382015460405163a9059cbb60e01b815233600482015260248101919091526001600160a01b039091169063a9059cbb906044016020604051808303816000875af1158015610cab573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ccf9190611ebf565b610d0e5760405162461bcd60e51b815260206004820152601060248201526f2a3930b739b332b9102330b4b632b21760811b60448201526064016103ed565b610dac565b600381015460405160009182913391908381818185875af1925050503d8060008114610d5b576040519150601f19603f3d011682016040523d82523d6000602084013e610d60565b606091505b509150915081610da95760405162461bcd60e51b81526020600482015260146024820152732330b4b632b2103a379039b2b7321022ba3432b960611b60448201526064016103ed565b50505b505060018055565b60045460609060009067ffffffffffffffff811115610dd557610dd5611edc565b604051908082528060200260200182016040528015610e0e57816020015b610dfb611ca9565b815260200190600190039081610df35790505b5090506000805b600454811015610a8957600060048281548110610e3457610e34611ef2565b60009182526020918290206040805160e08101825260079093029091018054835260018101546001600160a01b03908116948401859052600282015481169284019290925260038101546060840152600481015460ff90811615156080850152600582015460a085015260069091015416151560c083015290925087161415610ee45780848481518110610eca57610eca611ef2565b60200260200101819052508280610ee090611f1e565b9350505b5080610eef81611f1e565b915050610e15565b60606000610f0433610db4565b90506000815167ffffffffffffffff811115610f2257610f22611edc565b604051908082528060200260200182016040528015610f5b57816020015b610f48611ca9565b815260200190600190039081610f405790505b5090506000805b8351811015610a89576000848281518110610f7f57610f7f611ef2565b602002602001015190508060a0015142118015610f9d57508060c001515b15610fcf5780848481518110610fb557610fb5611ef2565b60200260200101819052508280610fcb90611f1e565b9350505b5080610fda81611f1e565b915050610f62565b60048181548110610ff257600080fd5b600091825260209091206007909102018054600182015460028301546003840154600485015460058601546006909601549496506001600160a01b03938416959290931693909260ff90811692911687565b6000546001600160a01b0316331461106e5760405162461bcd60e51b81526004016103ed90611e71565b6110786000611c46565b565b600260015414156110cd5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016103ed565b60026001556005548111156111165760405162461bcd60e51b815260206004820152600f60248201526e233ab732103737ba1032bc34b9ba1760891b60448201526064016103ed565b60006004828154811061112b5761112b611ef2565b600091825260209091206002600790920201908101549091506001600160a01b031633146111935760405162461bcd60e51b81526020600482015260156024820152742cb7ba9030b932903737ba103ab73637b1b5b2b91760591b60448201526064016103ed565b42816005015411610bef5760405162461bcd60e51b815260206004820152600d60248201526c233ab7321032bc3834b932b21760991b60448201526064016103ed565b60006111e160055490565b905090565b6000546001600160a01b031633146112105760405162461bcd60e51b81526004016103ed90611e71565b6001600160a01b0381166112755760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016103ed565b61127e81611c46565b50565b604080516002808252606082018352600092839291906020830190803683375050600754604080516315ab88c960e31b815290519394506001600160a01b039091169263ad5c4648925060048083019260209291908290030181865afa1580156112ef573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113139190611f39565b8160008151811061132657611326611ef2565b6001600160a01b03928316602091820292909201015260025482519116908290600190811061135757611357611ef2565b6001600160a01b0392831660209182029290920101526002546040516370a0823160e01b815230600482015260009291909116906370a0823190602401602060405180830381865afa1580156113b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113d59190611ea6565b6007549091506001600160a01b031663b6f9de9534600085306113fa4261012c611f56565b6040518663ffffffff1660e01b81526004016114199493929190611fb2565b6000604051808303818588803b15801561143257600080fd5b505af1158015611446573d6000803e3d6000fd5b50506002546040516370a0823160e01b8152306004820152600094506001600160a01b0390911692506370a082319150602401602060405180830381865afa158015611496573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114ba9190611ea6565b90506114c68183611c96565b935050505090565b60006040518060e001604052806114e460055490565b81523360208201526001600160a01b0385166040820152606081018690526001608082015260a0016115168442611f56565b815260016020918201819052600480549182018155600052825160079091027f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b810191909155908201517f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19c820180546001600160a01b039283166001600160a01b03199182161790915560408401517f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19d840180549184169190921617905560608301517f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19e83015560808301517f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19f8301805491151560ff1992831617905560a08401517f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd1a084015560c08401517f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd1a1909301805493151593909116929092179091559091508316337fbd6a81ea5131b9b20bf4f7058beb7d920e9fc7383a749741f938bdb75133a9a76116c560055490565b60408051918252600160208301528101889052606081018690526080015b60405180910390a36104ab600580546001019055565b60006040518060e0016040528061170f60055490565b81523360208201526001600160a01b0385166040820152606081018690526000608082015260a0016117418442611f56565b815260016020918201819052600480549182018155600052825160079091027f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b810191909155908201517f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19c820180546001600160a01b039283166001600160a01b03199182161790915560408401517f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19d840180549184169190921617905560608301517f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19e83015560808301517f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19f8301805491151560ff1992831617905560a08401517f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd1a084015560c08401517f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd1a1909301805493151593909116929092179091559091508316337fbd6a81ea5131b9b20bf4f7058beb7d920e9fc7383a749741f938bdb75133a9a76118f060055490565b60408051918252600060208301528101889052606081018690526080016116e3565b60408051600280825260608201835260009283929190602083019080368337019050509050838160008151811061194b5761194b611ef2565b6001600160a01b03928316602091820292909201015260025482519116908290600190811061197c5761197c611ef2565b6001600160a01b0392831660209182029290920101526002546040516370a0823160e01b815230600482015260009291909116906370a0823190602401602060405180830381865afa1580156119d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119fa9190611ea6565b600754604051635c11d79560e01b81529192506001600160a01b031690635c11d79590611a34908790600090879030904290600401611fe7565b600060405180830381600087803b158015611a4e57600080fd5b505af1158015611a62573d6000803e3d6000fd5b50506002546040516370a0823160e01b8152306004820152600093506001600160a01b0390911691506370a0823190602401602060405180830381865afa158015611ab1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ad59190611ea6565b9050611ae18183611c96565b9695505050505050565b604080516002808252606082018352600092839291906020830190803683370190505090508381600081518110611b2457611b24611ef2565b6001600160a01b03928316602091820292909201810191909152600754604080516315ab88c960e31b81529051919093169263ad5c46489260048083019391928290030181865afa158015611b7d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ba19190611f39565b81600181518110611bb457611bb4611ef2565b6001600160a01b03928316602091820292909201015260075447911663791ac9478560008530611be64261012c611f56565b6040518663ffffffff1660e01b8152600401611c06959493929190611fe7565b600060405180830381600087803b158015611c2057600080fd5b505af1158015611c34573d6000803e3d6000fd5b50479250611ae1915082905083611c96565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000611ca28284612023565b9392505050565b6040805160e081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c081019190915290565b6001600160a01b038116811461127e57600080fd5b801515811461127e57600080fd5b600080600060608486031215611d1d57600080fd5b8335611d2881611ce5565b9250602084013591506040840135611d3f81611cfa565b809150509250925092565b600060208284031215611d5c57600080fd5b8135611ca281611ce5565b600080600080600060a08688031215611d7f57600080fd5b8535611d8a81611ce5565b9450602086013593506040860135611da181611ce5565b9250606086013591506080860135611db881611cfa565b809150509295509295909350565b602080825282518282018190526000919060409081850190868401855b82811015611e4b57815180518552868101516001600160a01b03908116888701528682015116868601526060808201519086015260808082015115159086015260a0808201519086015260c09081015115159085015260e09093019290850190600101611de3565b5091979650505050505050565b600060208284031215611e6a57600080fd5b5035919050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b600060208284031215611eb857600080fd5b5051919050565b600060208284031215611ed157600080fd5b8151611ca281611cfa565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600019821415611f3257611f32611f08565b5060010190565b600060208284031215611f4b57600080fd5b8151611ca281611ce5565b60008219821115611f6957611f69611f08565b500190565b600081518084526020808501945080840160005b83811015611fa75781516001600160a01b031687529582019590820190600101611f82565b509495945050505050565b848152608060208201526000611fcb6080830186611f6e565b6001600160a01b03949094166040830152506060015292915050565b85815284602082015260a06040820152600061200660a0830186611f6e565b6001600160a01b0394909416606083015250608001529392505050565b60008282101561203557612035611f08565b50039056fea264697066735822122060315ed84d4f5f97939b40e787ebd5d3f9c33ae509ecb55b7e5a473c87f17c1764736f6c634300080a0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "LockEth(address,uint256,bool)": {
        "details": "Sender will send eth to this, and if swap is true, swap it with denomination ERC20 token on uniswap, and create lock funds",
        "params": {
          "lockTime": "lock time",
          "swap": "if true, swap with denomination asset ",
          "unlocker": "The address that will be able to unlock the funds within lock time"
        }
      },
      "LockToken(address,uint256,address,uint256,bool)": {
        "details": "Sender swaps any ERC20 token with Eth on uniswap, and create lock funds",
        "params": {
          "amount": "ERC20 token amount",
          "erc20Token": "Any ERC20 token for swap",
          "isToken": "if true, create new token plan, else create new eth plan.",
          "lockTime": "lock time",
          "unlocker": "The address that will be able to unlock the funds within lock time"
        }
      },
      "claimLockedFund(uint256)": {
        "details": "claim locked token within lock time  -  unlocker.",
        "params": {
          "id": "locked fund id"
        }
      },
      "getPlansByOwner(address)": {
        "details": "Get all plans per owner",
        "params": {
          "owner": "owner of plans*"
        }
      },
      "getPlansByUnlocker(address)": {
        "details": "Get certain plan per unlocker claimable.",
        "params": {
          "unlocker": "unlocker of plan"
        }
      },
      "getTotalPlanCount()": {
        "details": "get current plan's length"
      },
      "getUnClaimedFunds()": {
        "details": "Retrieve unclaimed locked funds after locktime "
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "registerToken(address)": {
        "details": "Register new acceptable token",
        "params": {
          "newERC20TokenAddress": "acceptable token address"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "withdraw(uint256)": {
        "details": "Withdraw money back within lockTime. Owner, ",
        "params": {
          "id": "plan id"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/FundLockManager.sol:FundLockManager",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 115,
        "contract": "contracts/FundLockManager.sol:FundLockManager",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 1281,
        "contract": "contracts/FundLockManager.sol:FundLockManager",
        "label": "_denominationToken",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(ERC20)732"
      },
      {
        "astId": 1285,
        "contract": "contracts/FundLockManager.sol:FundLockManager",
        "label": "allowedTokens",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 1289,
        "contract": "contracts/FundLockManager.sol:FundLockManager",
        "label": "_plans",
        "offset": 0,
        "slot": "4",
        "type": "t_array(t_struct(Plan)1278_storage)dyn_storage"
      },
      {
        "astId": 1292,
        "contract": "contracts/FundLockManager.sol:FundLockManager",
        "label": "_planCounter",
        "offset": 0,
        "slot": "5",
        "type": "t_struct(Counter)863_storage"
      },
      {
        "astId": 1298,
        "contract": "contracts/FundLockManager.sol:FundLockManager",
        "label": "_uniswapV2Factory",
        "offset": 0,
        "slot": "6",
        "type": "t_contract(IUniswapV2Factory)2375"
      },
      {
        "astId": 1304,
        "contract": "contracts/FundLockManager.sol:FundLockManager",
        "label": "_uniswapV2Router",
        "offset": 0,
        "slot": "7",
        "type": "t_contract(IUniswapV2Router02)2463"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Plan)1278_storage)dyn_storage": {
        "base": "t_struct(Plan)1278_storage",
        "encoding": "dynamic_array",
        "label": "struct FundLockManager.Plan[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(ERC20)732": {
        "encoding": "inplace",
        "label": "contract ERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IUniswapV2Factory)2375": {
        "encoding": "inplace",
        "label": "contract IUniswapV2Factory",
        "numberOfBytes": "20"
      },
      "t_contract(IUniswapV2Router02)2463": {
        "encoding": "inplace",
        "label": "contract IUniswapV2Router02",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_struct(Counter)863_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 862,
            "contract": "contracts/FundLockManager.sol:FundLockManager",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Plan)1278_storage": {
        "encoding": "inplace",
        "label": "struct FundLockManager.Plan",
        "members": [
          {
            "astId": 1265,
            "contract": "contracts/FundLockManager.sol:FundLockManager",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1267,
            "contract": "contracts/FundLockManager.sol:FundLockManager",
            "label": "owner",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 1269,
            "contract": "contracts/FundLockManager.sol:FundLockManager",
            "label": "unlocker",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 1271,
            "contract": "contracts/FundLockManager.sol:FundLockManager",
            "label": "amount",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 1273,
            "contract": "contracts/FundLockManager.sol:FundLockManager",
            "label": "isToken",
            "offset": 0,
            "slot": "4",
            "type": "t_bool"
          },
          {
            "astId": 1275,
            "contract": "contracts/FundLockManager.sol:FundLockManager",
            "label": "lockTime",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 1277,
            "contract": "contracts/FundLockManager.sol:FundLockManager",
            "label": "isClaimable",
            "offset": 0,
            "slot": "6",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}